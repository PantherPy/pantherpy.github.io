{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#panther","title":"Panther","text":"<p>Is A Fast &amp;  Friendly Web Framework For Building Async APIs With Python 3.11+ </p> <p> </p> <p>Github -&gt; https://github.com/AliRn76/panther/</p> <p>PyPI -&gt; https://pypi.org/project/panther/</p>"},{"location":"#why-use-panther","title":"Why Use Panther ?","text":"<ul> <li>Document-oriented Databases ODM (PantherDB, MongoDB)</li> <li>Visual API Monitoring (In Terminal)</li> <li>Cache APIs (In Memory, In Redis)</li> <li>Built-in Authentication Classes (Customizable)</li> <li>Built-in Permission Classes (Customizable)</li> <li>Handle Custom Middlewares</li> <li>Handle Custom Throttling </li> </ul>"},{"location":"#benchmark","title":"Benchmark","text":"<p>We implemented most of the Python frameworks and sent  <code>25,000</code> requests per second  for <code>10</code> seconds (Total <code>250,000</code> requests) in the same environment with https://github.com/nakabonne/ali and here's the result:</p> <p>you can find the detailed results &amp; source codes here --&gt; benchmarks</p> Framework Throughput Request Handled Max Latencies Sanic 23,326 233,842 268.8ms Panther 14,719 147,595 113.1ms FastAPI 14,573 146,467 155.1ms Tornado 4,969 50.585 426.5ms Flask 3,555 36,396 1.2s Django 2,188 22,814 526.3ms Bottle 1,226 39,650 30.0s Pyramid 1,023 30,912 30.0s Cherrypy 639 24,944 30.0s"},{"location":"#installation","title":"Installation","text":"<ul> <li> Create a Virtual Environment <pre>$ python -m venv .venv</pre> <ul> <li> Active The Environment<ul> <li>Linux &amp; Mac   <pre>$ source .venv/bin/activate</pre></li> <li>Windows   <pre>$ .\\.venv\\Scripts\\activate</pre></li> </ul> <ul> <li> Install Panther<ul> <li>Normal   <pre>$ pip install panther</pre></li> <li>Include JWT Authentication &amp; MongoDB Requirements   <pre>$ pip install panther[full]</pre> </li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#create-project","title":"Create Project","text":"<pre><code>$ panther create &lt;project_name&gt; &lt;directory&gt;\n</code></pre>"},{"location":"#run-project","title":"Run Project","text":"<p>Panther uses Uvicorn as ASGI (Asynchronous Server Gateway Interface)</p> <pre><code>$ panther run </code></pre>"},{"location":"#monitoring-requests","title":"Monitoring Requests","text":"<pre><code>$ panther monitor </code></pre>"},{"location":"#python-shell","title":"Python Shell","text":"<p>Panther Uses bpython for shell</p> <pre><code>$ panther shell </code></pre>"},{"location":"#example","title":"Example","text":"<ul> <li> <p> Then run (<code>$ panther run</code>) the project, now you can see these two urls:</p> </li> <li> <p>http://127.0.0.1:8000/</p> </li> <li> <p>http://127.0.0.1:8000/info/</p> </li> </ul> <p>More examples: https://github.com/AliRn76/panther/tree/master/example.</p>"},{"location":"#you-can-create-project-with","title":"You can create project with","text":"<pre><code>$ panther create myproject\n</code></pre>"},{"location":"#or-create-it-yourself","title":"or create it yourself:","text":"<p>core/configs.py:</p> <pre><code>URLs = 'core/urls.py'\n</code></pre> <p>core/urls.py:</p> <pre><code>from app.urls import urls as app_urls\n\nurls = {\n    '/': app_urls,\n}\n</code></pre> <p>app/urls.py:</p> <pre><code>from app.apis import hello_world, info\n\nurls = {\n    '': hello_world,\n    'info/': info,\n}\n</code></pre> <p>app/apis.py:</p> <pre><code>from datetime import datetime, timedelta\n\nfrom panther.app import API\nfrom panther.configs import config\nfrom panther import version, status\nfrom panther.request import Request\nfrom panther.response import Response\nfrom panther.throttling import Throttling\n\n\nInfoThrottling = Throttling(rate=5, duration=timedelta(minutes=1))\n\n@API()\nasync def hello_world():\n    return {'detail': 'Hello World'}\n\n\n@API(cache=True, throttling=InfoThrottling)\nasync def info(request: Request):\n    data = {\n        'version': version(),\n        'datetime_now': datetime.now().isoformat(),\n        'user_agent': request.headers.user_agent,\n        'db_engine': config['db_engine'],\n    }\n    return Response(data=data, status_code=status.HTTP_202_ACCEPTED)\n</code></pre>"},{"location":"benchmarks/","title":"Benchmarks","text":""},{"location":"benchmarks/#benchmark","title":"Benchmark","text":"Framework Throughput Request Handled Max Latencies Sanic 23,326 233,842 268.8ms Panther 14,719 147,595 113.1ms FastAPI 14,573 146,467 155.1ms Tornado 4,969 50.585 426.5ms Flask 3,555 36,396 1.2s Django 2,188 22,814 526.3ms Bottle 1,226 39,650 30.0s Pyramid 1,023 30,912 30.0s Cherrypy 639 24,944 30.0s"},{"location":"benchmarks/#all-tests-happen-in","title":"All tests happen in","text":"<ul> <li>CPU: AMD Ryzen 9 5900HX with Radeon Graphics (16) @ 3.300GHz</li> <li>OS: Arch Linux x86_64</li> <li>KERNEL: 6.2.2-arch1-1</li> </ul>"},{"location":"benchmarks/#results","title":"Results","text":""},{"location":"benchmarks/#sanic","title":"Sanic","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#panther","title":"Panther","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#fastapi","title":"FastAPI","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#tornado","title":"Tornado","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#flask","title":"Flask","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#django","title":"Django","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#bottle","title":"Bottle","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#pyramid","title":"Pyramid","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"benchmarks/#cherrypy","title":"Cherrypy","text":"<p>[Test Source Code]</p> <p></p>"},{"location":"configs/","title":"Configs","text":"<p>Panther  stores all the configs in the <code>core/configs.py</code></p>"},{"location":"configs/#monitoring","title":"MONITORING","text":"<p>Type: <code>bool</code> (Default: <code>False</code>)</p> <p>It should be <code>True</code> if you want to use <code>panther monitor</code> command and see the monitoring logs</p> <p>If <code>True</code> it will:</p> <ul> <li>Log every request</li> </ul>"},{"location":"configs/#log_queries","title":"LOG_QUERIES","text":"<p>Type: <code>bool</code> (Default: <code>False</code>)</p> <p>If <code>True</code> it will:</p> <ul> <li>Calculate every query perf time</li> </ul>"},{"location":"configs/#middlewares","title":"MIDDLEWARES","text":"<p>Type: <code>list</code> (Default: <code>[ ]</code>)</p> <p>List of middlewares you want to use</p>"},{"location":"configs/#authentication","title":"AUTHENTICATION","text":"<p>Type: <code>str | None</code> (Default: <code>None</code>)</p> <p>Every request go through <code>authentication()</code> method of this <code>class</code></p> <p>Example: <code>AUTHENTICATION = 'panther.authentications.JWTAuthentication'</code></p>"},{"location":"configs/#urls","title":"URLs","text":"<p>Type: <code>str</code> (Required)</p> <p>It should be the address of your <code>urls</code> <code>dict</code></p> <p>Example: <code>URLS = 'configs/urls.py'</code></p>"},{"location":"configs/#default_cache_exp","title":"DEFAULT_CACHE_EXP","text":"<p>Type: <code>timedelta| None</code> (Default: <code>None</code>)</p> <p>It uses when you set <code>cache=True</code> in <code>@API</code> decorator</p>"},{"location":"configs/#throttling","title":"THROTTLING","text":"<p>Type: <code>Throttling | None</code> (Default: <code>None</code>)</p> <p>We use it as default <code>throttling</code> you can overwrite it in your <code>@API</code> too</p> <p>Example: <code>THROTTLING = Throttling(rate=10, duration=timedelta(seconds=10))</code></p>"},{"location":"configs/#user_model","title":"USER_MODEL","text":"<p>Type: <code>str | None</code> (Default: <code>'panther.db.models.User'</code>)</p> <p>It uses on authentication</p> <p>Example: <code>USER_MODEL = 'panther.db.models.User'</code></p>"},{"location":"configs/#jwtconfig","title":"JWTConfig","text":"<p>Type: <code>dict | None</code> (Default: <code>JWTConfig = {'key': SECRET_KEY}</code>)</p> <p>It uses when you set <code>panther.authentications.JWTAuthentication</code> as <code>AUTHENTICATION</code></p>"},{"location":"log_queries/","title":"Log Queries","text":"<p>Variable: <code>LOG_QUERIES</code> </p> <p>Type: <code>bool</code> </p> <p>Default: <code>False</code></p> <p>Panther has a <code>log_query</code> decorator on queries that process the <code>perf_time</code> of every query</p> <p>Make sure it is <code>False</code> on production </p>"},{"location":"log_queries/#log-example","title":"Log Example:","text":"<pre><code>INFO:     | 2023-03-19 20:37:27 | Query --&gt;  User.insert_one() --&gt; 1.6 ms\n</code></pre>"},{"location":"log_queries/#the-log-query-decorator","title":"The Log Query Decorator","text":"<pre><code>def log_query(func):\n    def log(*args, **kwargs):\n        if config['log_queries'] is False:\n            return func(*args, **kwargs)\n        start = perf_counter()\n        response = func(*args, **kwargs)\n        end = perf_counter()\n        class_name = args[0].__name__ if hasattr(args[0], '__name__') else args[0].__class__.__name__\n        query_logger.info(f'\\033[1mQuery --&gt;\\033[0m  {class_name}.{func.__name__}() --&gt; {(end - start) * 1_000:.2} ms')\n        return response\n    return log\n</code></pre>"},{"location":"middlewares/","title":"Middlewares","text":"<p>Variable: <code>MIDDLEWARES</code> </p> <p>Type: <code>list</code> </p> <p>Default: <code>[]</code></p> <p>Panther has several <code>built-in</code> middleware:</p> <ul> <li> <p>Database Middleware</p> </li> <li> <p>Redis Middleware</p> </li> </ul> <p>And you can write your own custom middlewares too</p>"},{"location":"middlewares/#structure-of-middlewares","title":"Structure of middlewares","text":"<p><code>MIDDLEWARES</code> itself is a <code>list</code> of <code>tuples</code> which each <code>tuple</code> is like below:</p> <p>(<code>Address of Middleware Class</code>, <code>kwargs as dict</code>)</p>"},{"location":"middlewares/#database-middleware","title":"Database Middleware","text":"<p>This middleware will create a <code>db</code> connection that uses in <code>ODM</code> or you can use it manually from: <pre><code>from panther.db.connection import db\n</code></pre></p> <p>We only support 2 database: <code>PantherDB</code> &amp; <code>MongoDB</code></p> <ul> <li>Address of Middleware: <code>panther.middlewares.db.Middleware</code></li> <li> <p>kwargs:</p> <ul> <li> <p><code>{'url': f'pantherdb://{BASE_DIR}/{DB_NAME}.pantherdb'}</code></p> </li> <li> <p><code>{'url': f'mongodb://{DB_HOST}:27017/{DB_NAME}'}</code></p> </li> </ul> </li> <li> <p>Example of <code>PantherDB</code> (<code>Built-in Local Storage</code>):   <pre><code>MIDDLEWARES = [\n    ('panther.middlewares.db.Middleware', {'url': f'pantherdb://{BASE_DIR}/{DB_NAME}.pantherdb'}),\n]\n</code></pre></p> </li> <li>Example of <code>MongoDB</code>:   <pre><code>MIDDLEWARES = [\n    ('panther.middlewares.db.Middleware', {'url': f'mongodb://{DB_HOST}:27017/{DB_NAME}'}),\n]\n</code></pre></li> </ul>"},{"location":"middlewares/#redis-middleware","title":"Redis Middleware","text":"<ul> <li>Address of Middleware: <code>panther.middlewares.redis.Middleware</code></li> <li> <p>kwargs:      <pre><code>{'host': '127.0.0.1', 'port': 6379, ...}\n</code></pre></p> </li> <li> <p>Example   <pre><code>MIDDLEWARES = [\n    ('panther.middlewares.redis.Middleware', {'host': '127.0.0.1', 'port': 6379}),\n]\n</code></pre></p> </li> </ul>"},{"location":"middlewares/#custom-middleware","title":"Custom Middleware","text":"<p>Write a <code>class</code> and inherit from <pre><code>from panther.middlewares.base import BaseMiddleware\n</code></pre></p> <p>Then you can write your custom <code>before()</code> and <code>after()</code> methods</p> <ul> <li>The <code>methods</code> should be <code>async</code></li> <li><code>before()</code> should have <code>request</code> parameter</li> <li><code>after()</code> should have <code>response</code> parameter</li> <li>overwriting the <code>before()</code> and <code>after()</code> are optional</li> <li>The <code>methods</code> can get <code>kwargs</code> from their <code>__init__</code></li> </ul>"},{"location":"middlewares/#custom-middleware-example","title":"Custom Middleware Example","text":"<p>core/middlewares.py <pre><code>from panther.request import Request\nfrom panther.response import Response\nfrom panther.middlewares.base import BaseMiddleware\n\n\nclass CustomMiddleware(BaseMiddleware):\n\n    def __init__(self, something):\n        self.something = something\n\n    async def before(self, request: Request) -&gt; Request:\n        print('Before Endpoint', self.something)\n        return request\n\n    async def after(self, response: Response) -&gt; Response:\n        print('After Endpoint', self.something)\n        return response\n</code></pre> core/configs.py <pre><code>  MIDDLEWARES = [\n      ('core.middlewares.CustomMiddleware', {'something': 'hello-world'}),\n  ]\n</code></pre></p>"},{"location":"monitoring/","title":"Monitoring","text":"<p>Variable: <code>MONITORING</code> </p> <p>Type: <code>bool</code> </p> <p>Default: <code>False</code></p> <p>Panther has a <code>Monitoring</code> middleware that process the <code>perf_time</code> of every request</p> <p>It will create a <code>monitoring.log</code> file and log the records</p> <p>Then you can watch them live with: <code>panther monitor</code></p>"},{"location":"monitoring/#the-monitoring-middleware","title":"The Monitoring Middleware:","text":"<pre><code>    async def before(self, request: Request) -&gt; Request:\n        ip, port = request.client\n        self.log = f'{request.method} | {request.path} | {ip}:{port}'\n        self.start_time = perf_counter()\n        return request\n</code></pre> <pre><code>    async def after(self, status_code: int):\n        response_time = (perf_counter() - self.start_time) * 1_000\n        monitoring_logger.info(f'{self.log} | {response_time: .3} ms | {status_code}')\n</code></pre>"},{"location":"release_notes/","title":"Release Notes","text":""},{"location":"release_notes/#173","title":"1.7.3","text":"<ul> <li>Add Throttling Doc</li> <li>Fix some issue in Doc</li> </ul>"},{"location":"release_notes/#172","title":"1.7.2","text":"<ul> <li>Add Throttling to example</li> <li>Customize install_requires in setup.py</li> <li>Improve monitoring cli command</li> </ul>"},{"location":"release_notes/#171","title":"1.7.1","text":"<ul> <li>Rename db BaseModel to Model </li> <li>Add more docs</li> </ul>"},{"location":"release_notes/#170","title":"1.7.0","text":"<ul> <li>Add Throttling</li> </ul>"},{"location":"release_notes/#161","title":"1.6.1","text":"<ul> <li>Add AdminPermission</li> </ul>"},{"location":"release_notes/#160","title":"1.6.0","text":"<ul> <li>Handle Permissions</li> </ul>"},{"location":"release_notes/#152","title":"1.5.2","text":"<ul> <li>Improve Response data serialization</li> <li>Fix a bug in JWTAuthentication</li> </ul>"},{"location":"release_notes/#151","title":"1.5.1","text":"<ul> <li>Fix error messages</li> </ul>"},{"location":"release_notes/#150","title":"1.5.0","text":"<ul> <li>Refactor Mongodb ODM</li> <li>Minor Improvement</li> </ul>"},{"location":"release_notes/#140","title":"1.4.0","text":"<ul> <li>Add QUERY_LOG</li> </ul>"},{"location":"release_notes/#132","title":"1.3.2","text":"<ul> <li>Add Uvicorn to the setup requirements</li> <li>Update Readme</li> </ul>"},{"location":"release_notes/#131","title":"1.3.1","text":"<ul> <li>Fix a bug in project creation template</li> <li>Fix a bug in caching</li> </ul>"},{"location":"release_notes/#130","title":"1.3.0","text":"<ul> <li>Add PantherDB to Panther</li> <li>Remove tinydb</li> </ul>"},{"location":"release_notes/#127","title":"1.2.7","text":"<ul> <li>Fix a bug while using tinydb</li> </ul>"},{"location":"release_notes/#126","title":"1.2.6","text":"<ul> <li>Update Readme</li> </ul>"},{"location":"release_notes/#125","title":"1.2.5","text":"<ul> <li>Fix install_requires issue</li> <li>Add benchmarks to docs</li> </ul>"},{"location":"release_notes/#124","title":"1.2.4","text":"<ul> <li>Remove Uvicorn From install_requires</li> <li>Working on Docs</li> </ul>"},{"location":"release_notes/#123","title":"1.2.3","text":"<ul> <li>Fix URL Routing</li> </ul>"},{"location":"release_notes/#121","title":"1.2.1","text":"<ul> <li>Path Variable Handled Successfully</li> </ul>"},{"location":"release_notes/#120","title":"1.2.0","text":"<ul> <li>Read multipart/form-data with Regex</li> </ul>"},{"location":"release_notes/#119","title":"1.1.9","text":"<ul> <li>Refactoring code style with ruff </li> <li>Add asyncio.TaskGroup() </li> </ul>"},{"location":"release_notes/#118","title":"1.1.8","text":"<ul> <li>Refactor cli run command </li> </ul>"},{"location":"release_notes/#117","title":"1.1.7","text":"<ul> <li>Add benchmark pictures to doc </li> </ul>"},{"location":"release_notes/#115","title":"1.1.5","text":"<ul> <li>Clean Readme</li> <li>Clean main.py </li> </ul>"},{"location":"release_notes/#114","title":"1.1.4","text":"<ul> <li>Update Readme </li> </ul>"},{"location":"release_notes/#113","title":"1.1.3","text":"<ul> <li>Fix a query in TinyDB </li> </ul>"},{"location":"release_notes/#112","title":"1.1.2","text":"<ul> <li>Add delete_many query to TinyDB </li> </ul>"},{"location":"release_notes/#111","title":"1.1.1","text":"<ul> <li>Add TinyDB</li> </ul>"},{"location":"release_notes/#110","title":"1.1.0","text":"<ul> <li>Debug the Template </li> </ul>"},{"location":"release_notes/#109","title":"1.0.9","text":"<ul> <li>Handle string exceptions (raise them as detail: error) </li> <li>Little debug on MongoQueries</li> </ul>"},{"location":"release_notes/#107","title":"1.0.7","text":"<ul> <li>Working on queries</li> <li>Fix a bug in query methods </li> </ul>"},{"location":"release_notes/#106","title":"1.0.6","text":"<ul> <li>Update the Template </li> </ul>"},{"location":"release_notes/#104","title":"1.0.4","text":"<ul> <li>Debug template </li> </ul>"},{"location":"release_notes/#102","title":"1.0.2","text":"<ul> <li>Add global config</li> <li>Split the BaseModels</li> <li>Worked on MongoQuery</li> <li>Set Mongo as default database while creating project </li> <li>Minor Improvement</li> </ul>"},{"location":"release_notes/#101","title":"1.0.1","text":"<ul> <li>Add alembic To Project </li> </ul>"},{"location":"release_notes/#10","title":"1.0.","text":"<ul> <li>Refactor &amp; Complete the CLI </li> </ul>"},{"location":"release_notes/#019","title":"0.1.9","text":"<ul> <li>Fix install_requires</li> </ul>"},{"location":"release_notes/#018","title":"0.1.8","text":"<ul> <li>Update Readme</li> </ul>"},{"location":"release_notes/#017","title":"0.1.7","text":"<ul> <li>Update Readme</li> </ul>"},{"location":"release_notes/#016","title":"0.1.6","text":"<ul> <li>Handle Most Types as Data in Response</li> </ul>"},{"location":"release_notes/#014","title":"0.1.4","text":"<ul> <li>Working On DB Connection </li> </ul>"},{"location":"release_notes/#001","title":"0.0.1","text":"<ul> <li>Make It Ready For PyPI </li> </ul>"},{"location":"throttling/","title":"Throttling","text":"<p>Variable: <code>THROTTLING</code> </p> <p>Type: <code>str</code> </p> <p>In Panther, you can use <code>Throttling</code> for all APIs at once in <code>core/configs.py</code> or per API in its <code>@API</code> decorator</p> <p>The <code>Throttling</code> class has 2 field <code>rate</code> &amp; <code>duration</code></p> <p>rate: int</p> <p>duration: datetime.timedelta</p> <p>It will return <code>Too Many Request</code> <code>status_code: 429</code> if user try to request in the <code>duration</code> more than <code>rate</code> And user will baned( get<code>Too Many Request</code> ) for <code>duration</code></p> <p>And keep that in mind if you have <code>Throttling</code> in <code>@API()</code>, the <code>Throttling</code> of <code>core/configs.py</code> will be ignored.</p>"},{"location":"throttling/#for-all-apis-example","title":"For All APIs Example:","text":"<p>core/configs.py <pre><code>from datetime import timedelta\n\nfrom panther.throttling import Throttling\n\n\n# User only can request 5 times in every minute\nTHROTTLING = Throttling(rate=5, duration=timedelta(minutes=1))\n</code></pre></p>"},{"location":"throttling/#for-single-api-example","title":"For Single API Example:","text":"<p>apis.py <pre><code>from datetime import timedelta\n\nfrom panther.throttling import Throttling\nfrom panther.app import API\n\n\n# User only can request 5 times in every minute\nInfoThrottling = Throttling(rate=5, duration=timedelta(minutes=1))\n\n\n@API(throttling=InfoThrottling)\nasync def info_api():\n    pass\n</code></pre></p>"},{"location":"todos/","title":"TODOs","text":""},{"location":"todos/#base","title":"Base","text":"<ul> <li>\u2705 Start with Uvicorn </li> <li>\u2705 Fix URL Routing </li> <li>\u2705 Read Configs </li> <li>\u2705 Handle Exceptions </li> <li>\u2705 Add Custom Logger </li> <li>\u2705 Request Class </li> <li>\u2705 Response Class </li> <li>\u2705 Validate Input </li> <li>\u2705 Custom Output Model </li> <li>\u2705 Log Queries</li> <li>\u2705 Add Package Requirements</li> <li>\u2705 Custom Logging</li> <li>\u2705 Caching</li> <li>\u2705 Handle Path Variable</li> <li>\u2705 Handle Form-Data</li> <li>\u2610 Handle Cookie</li> <li>\u2610 Handle File </li> <li>\u2610 Handle WS </li> <li>\u2610 Handle GraphQL</li> <li>\u2610 Handle Throttling</li> <li>\u2610 Handle Testing</li> </ul>"},{"location":"todos/#database","title":"Database:","text":"<ul> <li>\u2705 Structure Of DB Connection</li> <li>\u2705 TinyDB Connection</li> <li>\u2705 MongoDB Connection</li> <li>\u2705 Create Custom BaseModel For All Type Of Databases</li> <li>\u2610 Set TinyDB As Default</li> </ul>"},{"location":"todos/#custom-orm","title":"Custom ORM","text":"<ul> <li>\u2705 Get One </li> <li>\u2705 List  </li> <li>\u2705 Create </li> <li>\u2705 Delete </li> <li>\u2705 Update</li> <li>\u2610 Get or Raise</li> <li>\u2610 Get or Create</li> <li>\u2610 List with Pagination</li> <li>\u2610 Other Queries In TinyDB</li> <li>\u2610 Other Queries In MongoDB</li> </ul>"},{"location":"todos/#middleware","title":"Middleware","text":"<ul> <li>\u2705 Add Middlewares To Structure</li> <li>\u2705 Create BaseMiddleware</li> <li>\u2705 Pass Custom Parameters To Middlewares</li> <li>\u2705 Import Custom Middlewares Of User</li> </ul>"},{"location":"todos/#authentication","title":"Authentication","text":"<ul> <li>\u2705 JWT Authentication</li> <li>\u2705 Separate Auth For Every API</li> <li>\u2610 Handle Permissions </li> <li>\u2610 Token Storage Authentication</li> <li>\u2610 Cookie Authentication</li> <li>\u2610 Query Param Authentication</li> <li>\u2610 Store JWT After Logout In Redis/ Memory</li> </ul>"},{"location":"todos/#cache","title":"Cache","text":"<ul> <li>\u2705 Add Redis To Structure</li> <li>\u2705 Create Cache Decorator</li> <li>\u2705 Handle In Memory Caching </li> <li>\u2705 Handle In Redis Caching </li> <li>\u2610 Write Async LRU_Caching With TTL (Replace it with in memory ...)</li> </ul>"},{"location":"todos/#cli","title":"CLI","text":"<ul> <li>\u2705 Create Project </li> <li>\u2705 Run Project </li> <li>\u2705 Monitor Requests Response Time</li> <li>\u2705 Create Project with Options</li> <li>\u2705 Monitoring With Textual</li> </ul>"},{"location":"todos/#documentation","title":"Documentation","text":"<ul> <li>\u2705 Create MkDocs For Project </li> <li>\u2610 Benchmarks</li> <li>\u2610 Release Notes</li> <li>\u2610 Features</li> <li>\u2610 Complete The MkDoc</li> </ul>"},{"location":"todos/#tests","title":"Tests","text":"<ul> <li>\u2610 Write Test For Panther </li> <li>\u2610 Test ...</li> </ul>"},{"location":"urls/","title":"URLs","text":"<p>Variable: <code>URLs</code> </p> <p>Type: <code>str</code> </p> <p>Required: <code>True</code></p> <ul> <li><code>URLs</code> should point to the root of your <code>urls</code> file, and in that file you should have a <code>dict</code> name <code>urls</code></li> <li><code>key</code> of urls dict is <code>path</code> &amp; value is <code>endpoint</code> or another <code>dict</code></li> <li>path variables are handled like below:<ul> <li>&lt;<code>variable_name</code>&gt;</li> <li>Example: <code>user/&lt;user_id&gt;/blog/&lt;title&gt;/</code></li> <li>The <code>endpoint</code> should have parameters with those names too</li> <li>Example: <code>async def profile_api(user_id: int, title: str):</code></li> </ul> </li> </ul>"},{"location":"urls/#structure-example","title":"Structure Example","text":"<ul> <li>core/configs.py     <pre><code>`URLs = 'configs/urls.py'`\n</code></pre></li> <li>core/urls.py     <pre><code>from app.urls import app_urls\n\nurls = {\n    'user/': app_urls,\n}\n</code></pre></li> <li> <p>app/urls.py     <pre><code>from app.apis import *\n\nurls = {\n    'login/': login_api,\n    'logout/': logout_api,\n    'profile/&lt;user_id&gt;/': profile_api,\n}\n</code></pre></p> </li> <li> <p>app/apis.py     <pre><code>...\n\n@API()\nasync def profile_api(user_id: int):\n    return User.find_one(id=user_id)\n</code></pre></p> </li> </ul>"},{"location":"tutorials/create_project/","title":"Create Project","text":"<p>We assume you already have <code>Python 3.11+</code> installed, so</p> <p>Create Virtual Environment with:    <pre><code>$ python -m venv .venv\n</code></pre></p> <p>and active it with: - In Linux or Mac:     <pre><code>$ source .venv/bin/activate\n</code></pre> - In windows:     <pre><code>$ .\\.venv\\Scripts\\activate\n</code></pre></p> <p>Now we can create a test project named <code>blog</code> with: </p> <pre><code>$ panther create blog\n</code></pre> <p>and if you don't want to panther create directory with name of project, so pass you custom directory name to it:</p> <pre><code>$ panther create blog custom_directory\n</code></pre> <p>Now you can run the project with:: <pre><code>$ panther run\n</code></pre></p> <p>and check this two sample endpoints on your browser:</p> <ul> <li> <p>http://127.0.0.1:8000/</p> </li> <li> <p>http://127.0.0.1:8000/info/</p> </li> </ul>"},{"location":"tutorials/first_api/","title":"First API","text":"<p>Let's write custom API that returns current time of your system:</p> <ol> <li> <p>add an url named <code>time</code> to your app/urls.py that points to <code>time_api</code> function</p> <pre><code>urls = {\n    '': hello_world,\n    'info/': info,\n    'time/': time_api,\n}\n</code></pre> </li> <li> <p>create <code>time_api</code> function in <code>app.apis.py</code> </p> <pre><code>from datetime import datetime\nfrom panther.app import API\nfrom panther.response import Response\nfrom panther import status\n\n@API()\nasync def time_api():\n    return Response(data=datetime.now(), status_code=status.HTTP_202_ACCEPTED)\n</code></pre> </li> </ol> <p>Now you can see the current time in your browser:</p> <p>http://127.0.0.1:8000/time/</p>"}]}