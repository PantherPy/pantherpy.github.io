{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#panther","title":"Panther","text":"<p>Is A Fast &amp;  Friendly, Web Framework For Building Async APIs With Python 3.11+ </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Document-oriented Databases ORM (TinyDB, MongoDB)</li> <li>Visual API Monitoring (In Terminal)</li> <li>Cache APIs (In Memory, In Redis)</li> <li>Built-in Authentication Classes (Customizable)</li> <li>Built-in Permission Classes (Customizable)</li> <li>Handle Custom Middlewares</li> </ul>"},{"location":"#benchmark","title":"Benchmark","text":"<p>We implemented most of the Python frameworks and sent  <code>60_000</code> requests per second  for a total of <code>10</code> seconds (Total <code>600_000</code> requests) in the same environment with https://github.com/nakabonne/ali and here's the result:</p> <p>we won't rate other frameworks with throughput, so the names are censored. but you can find the detailed results &amp; source codes [here]</p> Framework Request Handled Max Latencies ... 275,060 270.3ms ... 188,016 195.6ms Panther 156,743 214.7ms ... 66,274 476.2ms ... 52,350 1.2924s ... 32,944 30.00ms ... 31,336 30.03ms ... 19,820 30.0s"},{"location":"#installation","title":"Installation","text":"<ul> <li> Create a Virtual Environment <pre>$ python -m venv .venv</pre> <ul> <li> Active The Environment<ul> <li>Linux &amp; Mac   <pre>$ source .venv/bin/activate</pre></li> <li>Windows   <pre>$ .\\.venv\\Scripts\\activate</pre></li> </ul> <ul> <li> Install Panther<ul> <li>Normal   <pre>$ pip install panther</pre></li> <li>Include JWT Authentication   <pre>$ pip install panther[full]</pre> </li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#create-project","title":"Create Project","text":"<pre><code>$ panther create &lt;project_name&gt; &lt;directory&gt;\n</code></pre>"},{"location":"#run-project","title":"Run Project","text":"<p>Panther needs Uvicorn as ASGI (Asynchronous Server Gateway Interface)   <pre><code>$ pip install uvicorn[standard]\n</code></pre>   Then   <pre><code>$ panther run </code></pre></p>"},{"location":"#monitoring-requests","title":"Monitoring Requests","text":"<pre><code>$ panther monitor </code></pre>"},{"location":"#python-shell","title":"Python Shell","text":"<pre><code>$ panther shell </code></pre>"},{"location":"#example","title":"Example","text":"<ul> <li> <p> Then run (<code>$ panther run</code>) the project, now you can see these two urls:</p> </li> <li> <p>http://127.0.0.1:8000/</p> </li> <li> <p>http://127.0.0.1:8000/info/</p> </li> </ul> <p>More examples: https://github.com/AliRn76/panther/tree/master/example.</p>"},{"location":"#you-can-create-project-with","title":"You can create project with","text":"<pre><code>$ panther create myproject\n</code></pre>"},{"location":"#or-create-it-yourself","title":"or create it yourself:","text":"<p>core/configs.py:</p> <pre><code>URLs = 'core/urls.py'\n</code></pre> <p>core/urls.py:</p> <pre><code>from app.urls import urls as app_urls\n\nurls = {\n    '/': app_urls,\n}\n</code></pre> <p>app/urls.py:</p> <pre><code>from app.apis import hello_world, info\n\nurls = {\n    '': hello_world,\n    'info/': info,\n}\n</code></pre> <p>app/apis.py:</p> <pre><code>from panther import version, status\nfrom panther.app import API\nfrom panther.request import Request\nfrom panther.response import Response\n\n\n@API()\nasync def hello_world():\n    return {'detail': 'Hello World'}\n\n\n@API()\nasync def info(request: Request):\n    data = {\n        'version': version(),\n        'user_agent': request.headers.user_agent,\n        'content_length': request.headers.content_length,\n    }\n    return Response(data=data, status_code=status.HTTP_202_ACCEPTED)\n</code></pre>"},{"location":"configs/","title":"Configs","text":"<p>Panther  stores all the configs in the <code>core/configs.py</code></p>"},{"location":"configs/#monitoring","title":"MONITORING","text":"<p>Type: <code>bool</code> (Default: <code>True</code>)</p> <p>It should be <code>True</code> if you want to use <code>panther monitor</code> command and see the monitoring logs</p> <p>If <code>True</code> it will:</p> <ul> <li>Log every request</li> <li>Calculate every query perf time</li> </ul>"},{"location":"configs/#middlewares","title":"MIDDLEWARES","text":"<p>Type: <code>list</code> (Default: <code>[ ]</code>)</p> <p>List of middlewares you want to use</p> <p>read more ...</p>"},{"location":"configs/#authentication","title":"AUTHENTICATION","text":"<p>Type: <code>str | None</code> (Default: <code>None</code>)</p> <p>Every request go through <code>authentication()</code> method of this <code>class</code></p> <p>Example: <code>AUTHENTICATION = 'panther.authentications.JWTAuthentication'</code></p> <p>read more ...</p>"},{"location":"configs/#urls","title":"URLs","text":"<p>Type: <code>str</code> (Required)</p> <p>It should be the address of your <code>urls</code> <code>dict</code></p> <p>Example: <code>URLS = 'configs/urls.py'</code></p> <p>read more ...</p>"},{"location":"configs/#default_cache_exp","title":"DEFAULT_CACHE_EXP","text":"<p>Type: <code>timedelta| None</code> (Default: <code>None</code>)</p> <p>It uses while you are using <code>cache=True</code> in <code>@API</code> decorator</p> <p>read more ...</p>"},{"location":"release_notes/","title":"Release Notes","text":""},{"location":"release_notes/#124","title":"1.2.4","text":"<ul> <li>Remove Uvicorn From install_requires</li> <li>Working on Docs</li> </ul>"},{"location":"release_notes/#123","title":"1.2.3","text":"<ul> <li>Fix URL Routing</li> </ul>"},{"location":"release_notes/#121","title":"1.2.1","text":"<ul> <li>Path Variable Handled Successfully</li> </ul>"},{"location":"release_notes/#120","title":"1.2.0","text":"<ul> <li>Read multipart/form-data with Regex</li> </ul>"},{"location":"release_notes/#119","title":"1.1.9","text":"<ul> <li>Refactoring code style with ruff </li> <li>Add asyncio.TaskGroup() </li> </ul>"},{"location":"release_notes/#118","title":"1.1.8","text":"<ul> <li>Refactor cli run command </li> </ul>"},{"location":"release_notes/#117","title":"1.1.7","text":"<ul> <li>Add benchmark pictures to doc </li> </ul>"},{"location":"release_notes/#115","title":"1.1.5","text":"<ul> <li>Clean Readme</li> <li>Clean main.py </li> </ul>"},{"location":"release_notes/#114","title":"1.1.4","text":"<ul> <li>Update Readme </li> </ul>"},{"location":"release_notes/#113","title":"1.1.3","text":"<ul> <li>Fix a query in TinyDB </li> </ul>"},{"location":"release_notes/#112","title":"1.1.2","text":"<ul> <li>Add delete_many query to TinyDB </li> </ul>"},{"location":"release_notes/#111","title":"1.1.1","text":"<ul> <li>Add TinyDB</li> </ul>"},{"location":"release_notes/#110","title":"1.1.0","text":"<ul> <li>Debug the Template </li> </ul>"},{"location":"release_notes/#109","title":"1.0.9","text":"<ul> <li>Handle string exceptions (raise them as detail: error) </li> <li>Little debug on MongoQueries</li> </ul>"},{"location":"release_notes/#107","title":"1.0.7","text":"<ul> <li>Working on queries</li> <li>Fix a bug in query methods </li> </ul>"},{"location":"release_notes/#106","title":"1.0.6","text":"<ul> <li>Update the Template </li> </ul>"},{"location":"release_notes/#104","title":"1.0.4","text":"<ul> <li>Debug template </li> </ul>"},{"location":"release_notes/#102","title":"1.0.2","text":"<ul> <li>Add global config</li> <li>Split the BaseModels</li> <li>Worked on MongoQuery</li> <li>Set Mongo as default database while creating project </li> <li>Minor Improvement</li> </ul>"},{"location":"release_notes/#101","title":"1.0.1","text":"<ul> <li>Add alembic To Project </li> </ul>"},{"location":"release_notes/#10","title":"1.0.","text":"<ul> <li>Refactor &amp; Complete the CLI </li> </ul>"},{"location":"release_notes/#019","title":"0.1.9","text":"<ul> <li>Fix install_requires</li> </ul>"},{"location":"release_notes/#018","title":"0.1.8","text":"<ul> <li>Update Readme</li> </ul>"},{"location":"release_notes/#017","title":"0.1.7","text":"<ul> <li>Update Readme</li> </ul>"},{"location":"release_notes/#016","title":"0.1.6","text":"<ul> <li>Handle Most Types as Data in Response</li> </ul>"},{"location":"release_notes/#014","title":"0.1.4","text":"<ul> <li>Working On DB Connection </li> </ul>"},{"location":"release_notes/#001","title":"0.0.1","text":"<ul> <li>Make It Ready For PyPI </li> </ul>"},{"location":"todos/","title":"TODOs","text":""},{"location":"todos/#base","title":"Base","text":"<ul> <li>\u2705 Start with Uvicorn </li> <li>\u2705 Fix URL Routing </li> <li>\u2705 Read Configs </li> <li>\u2705 Handle Exceptions </li> <li>\u2705 Add Custom Logger </li> <li>\u2705 Request Class </li> <li>\u2705 Response Class </li> <li>\u2705 Validate Input </li> <li>\u2705 Custom Output Model </li> <li>\u2705 Log Queries</li> <li>\u2705 Add Package Requirements</li> <li>\u2705 Custom Logging</li> <li>\u2705 Caching</li> <li>\u2705 Handle Path Variable</li> <li>\u2705 Handle Form-Data</li> <li>\u2610 Handle Cookie</li> <li>\u2610 Handle File </li> <li>\u2610 Handle WS </li> <li>\u2610 Handle GraphQL</li> <li>\u2610 Handle Throttling</li> <li>\u2610 Handle Testing</li> </ul>"},{"location":"todos/#database","title":"Database:","text":"<ul> <li>\u2705 Structure Of DB Connection</li> <li>\u2705 TinyDB Connection</li> <li>\u2705 MongoDB Connection</li> <li>\u2705 Create Custom BaseModel For All Type Of Databases</li> <li>\u2610 Set TinyDB As Default</li> </ul>"},{"location":"todos/#custom-orm","title":"Custom ORM","text":"<ul> <li>\u2705 Get One </li> <li>\u2705 List  </li> <li>\u2705 Create </li> <li>\u2705 Delete </li> <li>\u2705 Update</li> <li>\u2610 Get or Raise</li> <li>\u2610 Get or Create</li> <li>\u2610 List with Pagination</li> <li>\u2610 Other Queries In TinyDB</li> <li>\u2610 Other Queries In MongoDB</li> </ul>"},{"location":"todos/#middleware","title":"Middleware","text":"<ul> <li>\u2705 Add Middlewares To Structure</li> <li>\u2705 Create BaseMiddleware</li> <li>\u2705 Pass Custom Parameters To Middlewares</li> <li>\u2705 Import Custom Middlewares Of User</li> </ul>"},{"location":"todos/#authentication","title":"Authentication","text":"<ul> <li>\u2705 JWT Authentication</li> <li>\u2705 Separate Auth For Every API</li> <li>\u2610 Handle Permissions </li> <li>\u2610 Token Storage Authentication</li> <li>\u2610 Cookie Authentication</li> <li>\u2610 Query Param Authentication</li> <li>\u2610 Store JWT After Logout In Redis/ Memory</li> </ul>"},{"location":"todos/#cache","title":"Cache","text":"<ul> <li>\u2705 Add Redis To Structure</li> <li>\u2705 Create Cache Decorator</li> <li>\u2705 Handle In Memory Caching </li> <li>\u2705 Handle In Redis Caching </li> <li>\u2610 Write Async LRU_Caching With TTL (Replace it with in memory ...)</li> </ul>"},{"location":"todos/#cli","title":"CLI","text":"<ul> <li>\u2705 Create Project </li> <li>\u2705 Run Project </li> <li>\u2705 Monitor Requests Response Time</li> <li>\u2705 Create Project with Options</li> <li>\u2705 Monitoring With Textual</li> </ul>"},{"location":"todos/#documentation","title":"Documentation","text":"<ul> <li>\u2705 Create MkDocs For Project </li> <li>\u2610 Benchmarks</li> <li>\u2610 Release Notes</li> <li>\u2610 Features</li> <li>\u2610 Complete The MkDoc</li> </ul>"},{"location":"todos/#tests","title":"Tests","text":"<ul> <li>\u2610 Write Test For Panther </li> <li>\u2610 Test ...</li> </ul>"},{"location":"tutorials/create_project/","title":"Create Project","text":"<p>We assume you already have <code>Python 3.11+</code> installed, so</p> <p>Create Virtual Environment with:    <pre><code>$ python -m venv .venv\n</code></pre></p> <p>and active it with: - In Linux or Mac:     <pre><code>$ source .venv/bin/activate\n</code></pre> - In windows:     <pre><code>$ .\\.venv\\Scripts\\activate\n</code></pre></p> <p>Now we can create a test project named <code>blog</code> with: </p> <pre><code>$ panther create blog\n</code></pre> <p>and if you don't want to panther create directory with name of project, so pass you custom directory name to it:</p> <pre><code>$ panther create blog custom_directory\n</code></pre> <p>Now you can run the project with:: <pre><code>$ panther run\n</code></pre></p> <p>and check this two sample endpoints on your browser:</p> <ul> <li> <p>http://127.0.0.1:8000/</p> </li> <li> <p>http://127.0.0.1:8000/info/</p> </li> </ul>"},{"location":"tutorials/first_api/","title":"First API","text":"<p>Let's write custom API that returns current time of your system:</p> <ol> <li> <p>add an url named <code>time</code> to your app/urls.py that points to <code>time_api</code> function</p> <pre><code>urls = {\n    '': hello_world,\n    'info/': info,\n    'time/': time_api,\n}\n</code></pre> </li> <li> <p>create <code>time_api</code> function in <code>app.apis.py</code> </p> <pre><code>from datetime import datetime\nfrom panther.app import API\nfrom panther.response import Response\nfrom panther import status\n\n@API()\nasync def time_api():\n    return Response(data=datetime.now(), status_code=status.HTTP_202_ACCEPTED)\n</code></pre> </li> </ol> <p>Now you can see the current time in your browser:</p> <p>http://127.0.0.1:8000/time/</p>"}]}