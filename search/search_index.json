{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#panther","title":"Panther","text":"<p>Is A Fast &amp;  Friendly, Web Framework For Building Async APIs With Python 3.11+ </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Document-oriented Databases ORM (TinyDB, MongoDB)</li> <li>Visual API Monitoring (In Terminal)</li> <li>Cache APIs (In Memory, In Redis)</li> <li>Built-in Authentication Classes (Customizable)</li> <li>Built-in Permission Classes (Customizable)</li> <li>Handle Custom Middlewares</li> </ul>"},{"location":"#benchmark","title":"Benchmark","text":"<p>We implemented most of the Python frameworks and sent  <code>2_000</code> requests per second  for a total of <code>10</code> seconds (Total <code>200_000</code> requeusts) in the same environment with https://github.com/nakabonne/ali and here's the result:</p> <p>we won't rate other frameworks with throughput, so the names are censored.</p> Framework Request Handled Framework 1 x Panther x Framework 2 x Framework 3 x Framework 4 x Framework 5 x Framework 6 x Framework 7 x"},{"location":"#test-source-codes-here","title":"test source codes: here","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<pre><code>$ python -m venv .venv\n</code></pre>"},{"location":"#active-the-environment","title":"Active The Environment","text":"<ul> <li>Linux &amp; Mac <pre><code>$ source .venv/bin/activate\n</code></pre></li> <li>Windows <pre><code>$ .\\.venv\\Scripts\\activate\n</code></pre></li> </ul>"},{"location":"#install-panther","title":"Install Panther","text":"<p><pre><code>$ pip install panter\n</code></pre>     or     <pre><code>$ pip install panter[full] # include JWT Authentication\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#create-project","title":"Create Project","text":"<pre><code>$ panther create &lt;project_name&gt; &lt;directory&gt;\n</code></pre>"},{"location":"#run-project","title":"Run Project","text":"<p>Panther needs Uvicorn as ASGI (Asynchronous Server Gateway Interface)   <pre><code>$ pip install uvicorn[standard]\n</code></pre>   Then   <pre><code>$ panther run </code></pre></p>"},{"location":"#monitoring-requests","title":"Monitoring Requests","text":"<pre><code>$ panther monitor </code></pre>"},{"location":"#python-shell","title":"Python Shell","text":"<pre><code>$ panther shell </code></pre>"},{"location":"#example","title":"Example","text":"<ul> <li> <p> Then run (<code>$ panther run</code>) the project, now you can see these two urls:</p> </li> <li> <p>http://127.0.0.1:8000/</p> </li> <li> <p>http://127.0.0.1:8000/info/</p> </li> </ul> <p>More examples: https://github.com/AliRn76/panther/tree/master/example.</p>"},{"location":"#you-can-create-project-with","title":"You can create project with","text":"<pre><code>$ panther create myproject\n</code></pre>"},{"location":"#or-create-it-yourself","title":"or create it yourself:","text":"<p>core/configs.py:</p> <pre><code>URLs = 'core/urls.py'\n</code></pre> <p>core/urls.py:</p> <pre><code>from app.urls import urls as app_urls\n\nurls = {\n    '/': app_urls,\n}\n</code></pre> <p>app/urls.py:</p> <pre><code>from app.apis import hello_world, info\n\nurls = {\n    '': hello_world,\n    'info/': info,\n}\n</code></pre> <p>app/apis.py:</p> <pre><code>from panther import version, status\nfrom panther.app import API\nfrom panther.request import Request\nfrom panther.response import Response\n\n\n@API()\nasync def hello_world():\n    return {'detail': 'Hello World'}\n\n\n@API()\nasync def info(request: Request):\n    data = {\n        'version': version(),\n        'user_agent': request.headers.user_agent,\n        'content_length': request.headers.content_length,\n    }\n    return Response(data=data, status_code=status.HTTP_202_ACCEPTED)\n</code></pre>"},{"location":"configs/","title":"Configs","text":"<p>Panther  stores all the configs in the <code>core/configs.py</code></p>"},{"location":"configs/#monitoring","title":"MONITORING","text":"<p>Type: <code>bool</code> (Default: <code>True</code>)</p> <p>It should be <code>True</code> if you want to use <code>panther monitor</code> command and see the monitoring logs</p> <p>If <code>True</code> it will: - Log Every Request - Calculate Every Query Perf Time</p>"},{"location":"configs/#middlewares","title":"MIDDLEWARES","text":"<p>Type: <code>list</code> (Default: <code>[ ]</code>)</p> <p>List of middlewares you want to use</p> <p>read more ...</p>"},{"location":"configs/#authentication","title":"AUTHENTICATION","text":"<p>Type: <code>str | None</code> (Default: <code>None</code>)</p> <p>Every request go through <code>authentication</code> method of this <code>class</code></p> <p>read more ...</p>"},{"location":"configs/#urls","title":"URLs","text":"<p>Type: <code>str</code> (Required)</p> <p>It should be the address of your <code>urls</code> <code>dict</code></p> <p>read more ...</p>"},{"location":"configs/#default_cache_exp","title":"DEFAULT_CACHE_EXP","text":"<p>Type: <code>timedelta| None</code> (Default: <code>None</code>)</p> <p>It uses while you are using <code>cache=True</code> in <code>@API</code> decorator</p> <p>read more ...</p>"}]}